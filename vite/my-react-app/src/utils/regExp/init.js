// 简单的逻辑公式
// 转义符号    转义字符
//  \          \字符
let a = '一名\n"牛逼"\n的程序员'
let reg = new RegExp('Test', 'gi')

let str = 'This is a test. Test is important'

// 表达式[] []中内容表示可选范围 [^]表示非
// | 表示或

// 元字符 正则使用的转义字符 一个元字符代表匹配一位
// \w = [0-9A-z_]
// \W = [^\w]
// \d = [0-9]
// \D = [^\d]
// \s = [\r\n\t\v\f]  -> \r 回车 \n 换行  \t 制表 \v 垂直换行符 \f 换页符
// \S = [^\s]
// \b 单词边界
// .可以匹配除了回车和换行的所有字符

// ----------------------------正则量词、属性、方法------------------------------
// n+ -> {1,正无穷} 1个或多个
// n* -> {0,正无穷} 0个及以上
// n? -> {0,1} 0个或一个
// n{x,y}} ->
// ^n -> 匹配任何以n开头的字符串
// n$ -> 匹配任何以n结尾的字符串
// ?=n -> 匹配任何其后紧接着指定字符串n的字符串  -> 某一个字符后面紧跟着某一个字符串
let reg2 = /a(?=b)/g
'ahjfksjabfkjskabkfsjkab'.match(reg2) // -> ['a','a','a']
// ?!n -> 某一个字符后面不是指定的某一个字符串
// 子表达式 反向引用 (\w)\1\1\1

// ----------------------------------正则属性-------------------------------------
// i g m

// ----------------------------------正则方法--------------------------------------
// reg.test():boolean
// reg.exec()

console.log(str.match(reg))
